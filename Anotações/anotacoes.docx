JAVASCRIPT

.   É uma linguagem de programação de alto nível

.   Auxilia na criação de páginas, junto de HTML e CSS

.   Possui tipagem dinâmica fraca(é possível mudar o tipo de uma variável ao longo do programa)

.   É considerada multiparadigma[Orientada a Objetos,imperativo,funcional]


1 '=' significa "Recebe" (sinal de atribuição)

2 '==' significa "Igual" (sinal de comparação)

Variáveis = Container de Dados

Variáveis{

    As variáveis 'var' e 'let' podem ser atualizadas retirando o primeiro valor e atribuindo um novo valor.

    As variáveis podem receber também valores nulos através da atribuição 'null'.

    Variáveis tem tamanhos diferentes para receber dados de tamanhos diferentes.


    Tipos de Variáveis{

        -----------------------------"typeof" (tipo de variável)-----------------------------

            Number = variáveis numéricas
                Infinity
                NaN (Not a Number)

            String = cadeia de caracteres.{

                =>  Existem três formas de delimitar uma string: "Aspas Duplas", 'Aspas Simples' e `Crase`. <=
            }
            
            Boolean = true or false

            null

            undefined

            object
                Array

            function

        -------------------------------------EXEMPLO------------------------------------------
            > let n = 200
            undefined
            > n
            200
            > typeof n
            'number'
            > n = 'google'
            'google'
            > typeof n
            'string'
            > typeof 6
            'number'
            > typeof 6.5
            'number'
            > typeof '6.5'
            'string'
            > typeof []
            'object'
            > typeof {}
            'object'
            > typeof function(){}
            'function'
            > typeof undefined
            'undefined'
            > typeof infinity
            'undefined'
            > typeof NaN
            'number'
            > typeof Infinity
            'number'
            > typeof null
            'object'
            >


    }
    Escopos{

        Escopo é a propriedade que determina onde uma variável pode ser utilizada como um identificador em um programa. 
        Uma variável declarada em uma função é normalmente local; o contexto define o escopo.
        
        No JavaScript podemos ter vários escopos.

            Global - iniciado com a aplicação.
            Local - podem existir em várias intruções como as funções
            
        Utilizando 'let' e 'const' podemos criar escopo até em instruções como if deixando o código mais confiável e separando em blocos cada instrução.
        
        Utilizando 'const' podemos garantir que a variável permaneça a mesma durante todo o código sem a possibilidade de alteração.
        
    }

    O nome de cada variável chama-se identificador.

    Identificadores{

        Podem começar com: 'Uma letra' , '$(cifrão)' ou ' _ (underline) '.

        Não podem começar com  'Números'

        Podem usar 'letras' e 'números'

        Podem ser utilizados 'Acentos' e 'Símbolos'

        "Não" podem conter 'espaços'

        Não podem ser palavras reservadas

        --------------------------------------DICAS------------------------------------------

        Maiúsculas e Minúsculas fazem diferença. (JavaScript é uma linguagem Case Sensitive, diferencia maiúsculas de minúsculas.)

        Tente escolher nomes coerentes para as variáveis.

        Evite se tornar um 'programador alfabeto' ou 'programador contador'(todos os nomes de variáveis são letras ou números)

    }
}

Tratamento de Dados{

    Conversão de Dados{
        STRING --> NUMBER

            Number.parseInt(n)
            Number.parseFloat(n)
            Number(n)
        
        NUMBER --> STRING

            String(n)
            n.toString()
    }

    Formatação de Strings{

        var s = "JavaScript"

        'Eu estou aprendendo s' => NÃO FAZ INTERPOLAÇÃO
        'Eu estou aprendendo' + s => USA DA CONCATENAÇÃO
        `Eu estou aprendendo ${s}` => USA TEMPLATE STRING

        ----------------------EXEMPLO--------------------------------

        VARIÁVEIS

            > nome = 'Juca'
            'Juca'
            > idade = 32
            32
            > nota = 9.4
            9.4

        CONCATENAÇÃO

            > 'O aluno ' + nome + ' de ' + idade + ' anos, tirou ' + nota + ' na prova.'
            'O aluno Juca de 32 anos, tirou 9.4 na prova.'
        
        TEMPLATE STRING  // (uso de crase pra definir um template)
        
            > `O aluno ${nome} de ${idade} anos, tirou a nota ${nota} na prova.`
            'O aluno Juca de 32 anos, tirou a nota 9.4 na prova.'
        
    }

    Formatação de Números{

        DEFININDO NÚMERO DE CASAS DECIMAIS

        --> x.toFixed(n) <--

            --------EXEMPLO---------

            > var n1 = 1547.9032
            undefined
            > n1
            1547.9032
            > n1.toFixed(2)
            > n1
            1547.9032
            > n1.toFixed(2)
            '1547.90'
            > n1.toFixed(2).replace('.' , ',')
            '1547,90'

        DEFININDO NÚMEROS COMO MOEDAS
        
        --> x.toLocaleString('pt-BR("ou outro")', {style: 'currency', currency: 'BRL("ou  outro")'}) <--

            --------EXEMPLO---------

            > var sal = 1346.98
            undefined
            > sal
            1346.98
            > sal
            1475.09348
            > sal.toFixed(2)
            '1475.09'
            > sal.toFixed(2).replace('.' , ',')
            '1475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'BRL'})
            'R$ 1.475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'USD'})
            'US$ 1.475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'EUR'})
            '€ 1.475,09'
            
    }
}

Operadores{

    Aritméticos{
        
        5 + 2 = 7    (ADIÇÃO)
        5 - 2 = 3    (SUBTRAÇÃO)
        5 * 2 = 10   (MULTIPLICAÇÃO)
        5 / 2 = 2.5  (DIVISÃO REAL)
        5 % 2 = 1    (DIVISÃO INTEIRA / CÁLCULO DE RESTO)
        5 ** 2 = 25  (POTENCIAÇÃO / EXPONENCIAÇÃO)

        Precedências

            1º =>    ()
            2º =>    **
            3º =>    * / %
            4º =>    + -
    }
    Atribuição{
        ' = ' significa recebe

        var a = 5 + 3               == 8
        var b = a % 5               == 3
        var c = 5 * b ** 2          == 45
        var d = 10 - a / 2          == 6
        var e = 6 * 2 / d           == 2
        var f = b % e + 4 / e       == 3

        Auto-Atribuição  -  atribuir valor a uma variável baseado no valor de antes.

            --------EXEMPLO---------

            > var n = 3
            undefined
            > n=n+4
            7
            > n=n+4
            11
            > n=n+4
            15
            > n=n+4
            > var n = 3
            undefined
            > n
            3
            > n = n + 4
            7
            > n = n - 5
            2
            > n = n * 4
            8
            > n = n / 2
            4
            > n = n ** 4
            256
            > n = 4
            4
            > n = n ** 2
            16
            > n = n % 5
            1
        
        Incremento

            ( x = x + 1 )  =>  ( x += 1 )  => ( x++ )
            ( x = x - 1 )  =>  ( x -= 1 )  => ( x-- )

        Simplificando
            n = n + 4    ==>   n  += 4
            n = n - 4    ==>   n  -= 4
            n = n * 4    ==>   n  *= 4
            n = n / 4    ==>   n  /= 4
            n = n % 4    ==>   n  %= 4
            n = n ** 4   ==>   n **= 4

        
    }

    Relacionais{

        Maior Q
        5 > 2       true (VERDADEIRO)
        
        Menor Q
        7 < 4       false (FALSO)
        
        Maior ou Igual 
        8 >= 8      true (VERDADEIRO)
        
        Menor ou Igual
        9 <= 7      false (FALSO)
        
        Igual
        5 == 5      true (VERDADEIRO)
        
        Diferente
        4 != 4      false (FALSO)

        IDENTIDADE
            
            5 ==  5   ==> true (VERDADEIRO)  //mesma grandeza e mesmo tipo
            5 == '5'  ==> true (VERDADEIRO)  //mesma grandeza e tipos diferentes
            O JavaScript testa apenas a grandeza dos caracteres

            5 === '5' ==> false (FALSO)
            5 ===  5  ==> true (VERDADEIRO)

    }

    Lógicos{

        !  NEGAÇÃO
            
            !true  --->  false
            !false --->  true

        && CONJUNÇÃO

            true&&true   ---> true
            true&&false  ---> false
            false&&true  ---> false
            false&&false ---> false

        || DISJUNÇÃO

            true||true    ---> true
            true||false   ---> true
            false||true   ---> true
            false||false  ---> false

        ?: TERNÁRIO

            |teste| ? |true| : |false|
            |média >= 7| ? |"Aprovado"| : |"Reprovado"|  //similar a if(se) e else(senão) 

		
        Ternários{

            Estrutura utilizada para reduzir as linhas de código trabalhando com três parâmetros.

            Ex sem ternário:
            
                const anoNascimento = 1980
                let Millenial

                if(anoNascimento >= 1981 && anoNascimento <= 1986){
                    Millenial = true
                }else{
                    Millenial = false
                }

            Ex com ternário:
            
                const anoNascimento = 1980
                const Millenial = (anoNascimento >= 1981 && anoNascimento <= 1986) ? true : false

            Ex com ternário e variáveis:
            
                const vendas = 10000
                const meta = 8000
                (vendas > meta) ? comissao = vendas * 0.1 : vendas * 0

                //Equivalente:

                const vendas = 10000
                const meta = 8000
                if(vendas > meta){
                    comissao = vendas * 0.1
                } else {
                    comissao = vendas * 0
                }

            Ex com ternário estilo elseif's:
                
                let inscritos = 2000000

                const premioYoutube = inscritos >= 50000000 ? 'Premio Rubi'
                                    : inscritos >= 10000000 ? 'Premio Diamante'
                                    : inscritos >=  1000000 ? 'Premio Ouro'
                                    : inscritos >=   100000 ? 'Premio Prata'
                                    : ''
        }

        Spread(...){

            Percorre todo o seu elemento e trata os seus valores.

            ex:
                const primeiro = [1,2,3]
                const segundo = [4,5,6]

                const combinado = [...primeiro,...segundo]

            O operador spread acima, na frente de cada um dos arrays, vai percorrer cada elemento de primeiro e segundo e guardar seus valores em combinado.
        }

    }
    Operadores Bitwise{
        Operador que trabalham com valores em binário. (Mesmo conceito de Portas Lógicas(or, and, not, nand...))

        Operador "&"(and)
            Quando houver equivalência de bits 1 retorna 1... senão retorna 0...
        
        Operador "|"(or)
            Retorna bits 1 se o um dos valores for 1...

        Operador "^"(xor)
            Retorna 1 se os valores forem diferentes...iguais retorna 0...
        
        Operadores "<<" e ">>"(Deslocamento de bits)
            Desloca a quantidade definida de bits para a esquerda("<<") ou para a direita(">>").
    }
}

D.O.M{

    DOM  é a sigla utilizada para Document Object Model
    Ñ funciona com o node.js

    Árvore DOM{
        raiz.objeto.

        window {

            location  -  localização do seu site
            document {
                html {
                    head {
                        meta
                        title
                    }
                        
                    body {
                        h1
                        p
                        section {
                            p {
                                strong
                            }
                            p
                        }
                    }
                }
            }
            history   -  histórico
        }
    }

    Selecionando Objetos{
        Por Marca/Tag{
            getElementsByTagName()
        }
        Por ID{
            getElementByID()
        }
        Por Nome{
            getElementsByName()
        }
        Por Classe{
            getElementsByClassName()
        }
        Por Seletor{
            querySelector()
        }

        Alterando Elementos{
            Você pode alterar o conteúdo de um elemento através da propriedade "innerHTML" e da propriedade "textContent"

            ESTRUTURA
            -------------------------------------
            let x = document.querySelector('div')
            x.innerHTML = "Olá, tudo bem?"
            -------------------------------------
        }

        Criando Elementos{
            
            Para criar elementos em JavaScript utilizamos o método 'createElement()'.

            ESTRUTURA
            -------------------------------------
            let x = document.createElement('p')
            -------------------------------------
            
        }

        Removendo Elementos{

            Para remover elementos em JavaScript utilizamos os métodos 'remove()' e 'removeChild()'.

            ESTRUTURA
            -----------------------------------------
                let x = document.querySelector('div')
                x.remove()
                -------------------------------------
                let x = document.querySelector('div')
                let y = x.parentNode
                y.removeChild(x)
            -----------------------------------------

        }

        Inserindo Elementos{

            Para inserir elementos em JavaScript utilizamos o método 'appendChild()' e 'insertBefore'.

            Método 'appendChild()'

            ESTRUTURA
            ---------------------------------------
            let el = document.createElement('div')
            el.classList = "div-criada"
            let container = document.querySelector('#container')
            container.appendChild(el)
            ---------------------------------------

            Método 'insertBefore'   // insere elementos antes de outro
            

            ESTRUTURA
            ---------------------------------------
            let el2 = document.createElement('div')
            el2.classList = "div-before"
            let el3 = document.querySelector('#container .div-criada')
            container.appendChild(el2, el3)
        }

        Trocando Elementos{

            Utilizamos o método "replaceChild()" para substituir elementos no DOM

            ESTRUTURA
            ----------------------------------------
            let el = document.createElement('div')
            let el2 = el.parentNode
            let el3 = document.createElement('span')

            el2.replaceChild( el3(o que vai entrar), el(o que vai sair) )
            
        }

        Adicionando Atributos{

            É possível adicionar atributos via JS através do método "setAttribute()"

            ESTRUTURA
            -------------------------------------------------
            let el = document.querySelector('div')
            el.setAttribute('id', 'container')
            -------------------------------------------------

        }

        Adicionando CSS pelo DOM{
            
            E possível também adicionar elementos CSS via DOM

            ESTRUTURA
            -------------------------------------------------
            let title = document.querySelector('h1')
            title.style.textAlign = 'center'
            title.style.backgroundColor = 'red'
            title.style.cssText = 'backgroundColor: red; display: inline-block; height: 150px; width: 150px;'
            -------------------------------------------------

        }

    }
    Eventos D.O.M {
        
        -----------------------------> ==><||(EVENT REFERENCE MDN)||> <== <----------------------------// PESQUISAR //--------------------------------

        --> <!-- O que são eventos DOM? --> <--

            Por meio de JavaScript podemos mapear algumas ações dos usuários, que chamamos de eventos.

            Como: movimento do mouse, click, mouse entrando ou saindo de um elemento, carregamento da página e etc.

            E então criar comportamento interessante como: animação de menu abrindo e fechando.

            Eventos de Carregamento

            Eventos de Mouse
                mouseenter
                mouseout
                mousemove
                mousedown
                mouseup
                click
                dbclick

            Keyboard Events
                keypress
                keydown
                keyup

    }   

    Funções e Métodos{

        Conjunto de códigos/linhas que são executadas quando chamadas.
        Bloco - conjunto de linhas de código.

        Métodos - funções relacionadas a objetos.

        ---------------------SINTAXE-----------------------
            function ação(parâmetros){
                Bloco
                return 
            }
        
        Funções Anônimas{
            
            Funções declaradas e usadas dinamicamente, sem precisar atribuir um nome a elas.

            ESTRUTURA
            ----------------------------------------------------------------
            function(){
                bloco
                return
            }
            ----------------------------------------------------------------

        }

        Arrow Funtions{

            Deriva do conceito de lambda functions e do paradigma funcional, e que tentam escrever de maneira concisa uma função.

            ESTRUTURA
            -----------------------------------------------------------------
            let x = () => {BLOCO}
                OU
            let x = a => BLOCO
            
            Tratam a propriedade "this" de maneira diferente de uma função normal.

        }

        Funções Construtoras{

            Funções que utilizam o operador new.
            São muito utilizadas com classes.
            Retornam um objeto.
            Tratam "this" de maneira diferente, onde no contexto this refere-se ao objeto criado e não ao objeto global.

        }
        Funções Aninhadas{

            Funções aninhadas são funções escritas dentro de outras funções.

            ESTRUTURA
            -------------x--------------------x------------------x---------------

            const funcao = (...valores) => {
                const soma = (val) => {
                    let res = 0
                    for(v of val){
                        res += v
                    }
                    return res
                }
                return soma(valores)
            }
            console.log(funcao(10,15,20))
            
            -------------xx----------------x<->x------------------xx--------------

        }

        Funções Geradoras{

            Funções Geradoras são funções que tem seu retorno adiado até quando nós precisarmos.
            Podem ser retornados vários processos ao longo do programa.
            Retornam Iteradores que permitem percorrer a função de maneira controlada.
            São a base da função assíncrona em JavaScript.

            ESTRUTURA
            -------------x--------------------x------------------x---------------

            function* cores(){
                const a = yield "Vermelho"
                const b = yield "Verde"
                const c = yield "Azul"
                const d = yield "Amarelo"
            }

            itc(iterador) = cores()
            console.log(itc.next().value)
            console.log(itc.next().value)
            console.log(itc.next().value)
            console.log(itc.next().value)
            
            -------------xx----------------x<->x------------------xx--------------
        }

        Método Map() {
            Método de iteração de arrays que percorre todo o seu corpo e executa uma função em cada elemento.
            Recebe dois parâmetros: elemento(valor) e índice.       

            ESTRUTURA
            -------------x--------------------x------------------x----------------
            const cursos = ['Html', 'CSS', 'Javascript', 'PHP', 'React']
            cursos.map((el,i) => {      //"el" recebe o elemento e 'i' recebe o índice do elemento.
                console.log(`Curso: ${el} - Posição: ${i}`)
            })
            -------------xx----------------x<->x------------------xx--------------
        }

        Método stopPropagation(){

            Método utilizado para que elementos filhos não herdem funções e eventos relacionados a seus elementos pais.
            Ex: Divs com listeners que tenham botões dentro, e que herdam os seus listeners. Com o método stopPropagation impedimos que esse listener os afete.

            ESTRUTURA
            -------------x--------------------x------------------x----------------
            const container = document.getElementsByTagName('div)
            const btn = [...document.querySelector('.btn')]

            container.addEventListener('click', (evt) => {
                console.log("Clicou")
                btn.map((el) => {
                    el.addEventListener('click', (evt) => {
                        evt.stopPropagation()
                    })
                })
            })
            -------------xx----------------x<->x------------------xx--------------
        }

        Método Filter() {

            Método que proporciona filtrar elementos de um array e retornar em outro.
            Utiliza três parâmetros: elemento(valor), índice e o próprio array.

            ESTRUTURA
            -------------x--------------------x------------------x----------------
            let arr = [1,2,3,4,5,6,7,8,9,10]
            const filtro = arr.filter((el,ind,arr) => {
                if(el > 5)
                    return el
            })

            console.log(filtro)
            -------------xx----------------x<->x------------------xx--------------
        }

        Método Find(){

            Utilizado para encontrar elementos dentro de um array.
            Retorna "true" ou "false" a depender da existência ou não do elemento no array.
            Recebe três parâmetros: elemento(valor), índice e o próprio array.

            ESTRUTURA
            -------------x--------------------x------------------x----------------
            let arr = [1,2,3,4,5,6,7]
            const result = arr.find((e,i,a) => {
                if(e>3)
                    console.log(e)              
            })

            //O resultado são os elementos maiores que 3.
            -------------xx----------------x<->x------------------xx--------------
        }

        Método Every(){

            Método utilizado para verificar se todos os elementos atendem a uma regra ou característica definida.
            
        }
    }
}

Condições{

    Desvio condicional
        Método para acionar diferentes tipos de ação a depender da situação.
        Impõe condições para que determinado comando seja executado.
    
    Estrutura

        if(condição == true){
            ----Ação-----
        }
        else(condição == false){
            ----Outra Ação-----
        }
    
    Tipos de Condição{

        Condição Simples
            (condição == true, executa ação)    // se n tiver else, nada acontece
                          
        Condição Composta
            if(condição == true, executa ação)
            else(condição == false, executa outra ação)
                    
        Condição Aninhada
            if(condição == true){
                ----Ação-----
            }else{
                if(condição 2 == true){
                    ------Ação-2--------
                }else{
                    ------Ação-3--------
                            OU
                    if(.....){
                        ................
                    }else{
                        ................
                    }
                }
            }
        
        Condição Múltipla{
            Serve para trabalhar valores fixos

            Estrutura
                switch(expressão){
                case 1:
                    -----Código--------
                break
                case 2:
                    -----Código--------
                break
                default:
                    -----Código--------
                break
            }  //   O COMANDO => "BREAK" <= É OBRIGATÓRIO!!!!
        }
        
        'BREAK'    ----> Utilizado para parar uma intrução.
        'CONTINUE' ----> Utilizado para pular uma intrução
        
    }   
}
Repetições {
    while    --->  estrutura de repetição com teste lógico no início

        Testa a condição e executa o bloco.
        
        ----------------------------
        while(condição){
            BLOCO
        }
        ----------------------------

    do while  -->  estrutura de repetição com teste lógico no final

        Executa o bloco e testa a condição.

        -----------------------------
        do{
            BLOCO
        }while() 
        -----------------------------

    for  ----->  estrutura de repetição com variável de controle

        Inicializa, faz o teste lógico e realiza um incremento

        ----------------------------
        for(inicio;teste;incremento){
            BLOCO           
        }

        for in
            Utilizado para percorrer objetos ou arrays utilizando o índice como base.

        for of
            Utilizado para percorrer objetos ou arrays, mas já mostrando o valor de cada elemento.
}
Arrays{
    Variáveis Simples - Armazenam apenas 1 valor por vez
    Variáveis Compostas - conseguem armazenar vários valores em uma mesma estrutura

    Arrays - vetor
        Variável composta que recebe vários elementos.
            Elemento - objeto que ocupa parte do array, o valor atribuído a ele e um índice.
                Índice - marcação para organizar o elementos dentro de um array, e a destinação de seus conteúdos.
                    Conteúdo - valor de cada elemento.
    
    Array = variável composta, que agrupa vários elementos, onde cada elemento tem um valor e uma chave de identificação.

    ESTRUTURA
        --------------------------------
        let num = []
        --------------------------------

    ADICIONANDO ELEMENTOS E ATRIBUTOS
        --------------------------------
        num[3] = 6
        --------------------------------
        Define o elemento número 3 com o valor 6.

        --------------------------------
        num.push(7)
        --------------------------------
        Define o valor 7 a um elemento criado na última posição.

        --------------------------------
        num.length
        --------------------------------
        Lê o comprimento(número de elementos) do seu vetor

        --------------------------------
        num.sort()
        --------------------------------
        Organiza os elementos em ordem crescente de acordo com seus valores

        --------------------------------
        num.indexOf(7)
        --------------------------------
        Busca um valor dentro de um vetor(no caso o valor 7), retornando a posição onde o valor se encontra. 
    
}
Funções{

    Funções(tarefas ou rotinas) - são ações executadas assim que são chamadas em decorrência de um evento.

        ESTRUTURA
            Chamada
            Parâmetro(1/+)
            Ação
            Retorno    

            // obs: Nem toda função tem parâmetros e nem toda função tem retorno.
            // obs: Funções em JavaScript só podem ter 1 retorno.

            -------------------------------------
            function ação(parâmetros){
                BLOCO
                return res
            }
            ação(5)
            --------------------------------------

            //obs: Funções tem propriedade recursiva(quando uma função chama ela mesma)     

    Funções de Construtor{
        
        Funções utilizadas geralmente no uso de classes que definem um padrão de construção de elementos.
    }
}

Objetos{
    Variável composta com possibilidade de índice literal(é possível nomear os índices, diferentemente de arrays(sempre são 0,1,2...))

    ESTRUTURA
     let variável = {índice: 'Valor'(string, number,  etc...), índice: 'valor', índice: 'valor', ...}
     
    ------------------------------------------------------------------------------------------------
        let amigo = {nome: 'José', sexo: 'M', peso: 85.4, engordar(p){}}
    ------------------------------------------------------------------------------------------------

    Objetos além de poder guardar vários valores, também podem armazenar funcionalidades(métodos).

    Tudo em JavaScript é um objeto(todas as funcionalidades possuem métodos que podem ser utilizados).
    
}
Instrução THIS{
    
    A instrução THIS sem nenhum escopo definido(sem estar em nenhuma função) sempre vai se referir ao objeto window.

    Dentro de um escopo(contexto/função) o this vai se referir a instância e pode acessar suas propriedades e alterá-las.

}

Propriedades Document{

    Através das propriedades do document podemos acessar elementos gerais do documento sem ter que selecionar algum em específico.

    ESTRUTURA
    ----------------------------------------------------------------
    document.title = "Novo título"
    console.log(document.body)
    console.log(document.head)
    ----------------------------------------------------------------

}
Callback Functions{
    São funções passadas em forma de argumentos para outras e executadas durante o código.
    São a base para entender funções assíncronas.

    ESTRUTURA
    ------------------------------------------------------------------------------------------------
    function exibir(num){
        console.log(num)
    }
    function soma(a,b,callback){
        var op = a + b
        callback(op)
    }
    function multiplicar(a,b,callback){
        var op = a * b
        callback(op)
    }
    soma(2,2,exibir)
    multiplicar(2,4,exibir)
}

setTimeout e setInterval{

    Podemos com estas funções criar ações no software que executam depois de um tempo ou de tempos em tempos.

    Um dos argumentos destas funções é uma callback function.

    ESTRUTURA
    ------------------------------------------------------------------------------------------------
    setTimeout(() => {
        console.log('Testando o setTimeout')
    }, 100)

    console.log("Isso vem primeiro mesmo vindo depois")
    ------------------------------------------------------------------------------------------------

    ESTRUTURA 2
    ------------------------------------------------------------------------------------------------
    setInterval(() => {
    console.log('Testando o setInterval')
    }, 2000) // obs: Funciona infinitamente. Cuidado!!!
    ------------------------------------------------------------------------------------------------
}

clearTimeout e clearInterval{

    Podemos dar um fim em setTimeout e setInterval através destes dois métodos.

    Então, após determinada condição, os timers não serão mais executados.
    
}




