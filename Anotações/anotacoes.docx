JAVASCRIPT

.   É uma linguagem de programação de alto nível

.   Auxilia na criação de páginas, junto de HTML e CSS

.   Possui tipagem dinâmica fraca(é possível mudar o tipo de uma variável ao longo do programa)

.   É considerada multiparadigma[Orientada a Objetos,imperativo,funcional]


1 '=' significa "Recebe" (sinal de atribuição)

2 '==' significa "Igual" (sinal de comparação)

Variáveis = Container de Dados

Variáveis{

    As variáveis 'var' e 'let' podem ser atualizadas retirando o primeiro valor e atribuindo um novo valor.

    As variáveis podem receber também valores nulos através da atribuição 'null'.

    Variáveis tem tamanhos diferentes para receber dados de tamanhos diferentes.


    Tipos de Variáveis{

        -----------------------------"typeof" (tipo de variável)-----------------------------

            Number = variáveis numéricas
                Infinity
                NaN (Not a Number)

            String = cadeia de caracteres.{

                =>  Existem três formas de delimitar uma string: "Aspas Duplas", 'Aspas Simples' e `Crase`. <=
            }
            
            Boolean = true or false

            null

            undefined

            object
                Array

            function

        -------------------------------------EXEMPLO------------------------------------------
            > let n = 200
            undefined
            > n
            200
            > typeof n
            'number'
            > n = 'google'
            'google'
            > typeof n
            'string'
            > typeof 6
            'number'
            > typeof 6.5
            'number'
            > typeof '6.5'
            'string'
            > typeof []
            'object'
            > typeof {}
            'object'
            > typeof function(){}
            'function'
            > typeof undefined
            'undefined'
            > typeof infinity
            'undefined'
            > typeof NaN
            'number'
            > typeof Infinity
            'number'
            > typeof null
            'object'
            >


    }
    Escopos{

        Escopo é a propriedade que determina onde uma variável pode ser utilizada como um identificador em um programa. 
        Uma variável declarada em uma função é normalmente local; o contexto define o escopo.
        
        No JavaScript podemos ter vários escopos.

            Global - iniciado com a aplicação.
            Local - podem existir em várias intruções como as funções
            
        Utilizando 'let' e 'const' podemos criar escopo até em instruções como if deixando o código mais confiável e separando em blocos cada instrução.
        
        Utilizando 'const' podemos garantir que a variável permaneça a mesma durante todo o código sem a possibilidade de alteração.
        
    }

    O nome de cada variável chama-se identificador.

    Identificadores{

        Podem começar com: 'Uma letra' , '$(cifrão)' ou ' _ (underline) '.

        Não podem começar com  'Números'

        Podem usar 'letras' e 'números'

        Podem ser utilizados 'Acentos' e 'Símbolos'

        "Não" podem conter 'espaços'

        Não podem ser palavras reservadas

        --------------------------------------DICAS------------------------------------------

        Maiúsculas e Minúsculas fazem diferença. (JavaScript é uma linguagem Case Sensitive, diferencia maiúsculas de minúsculas.)

        Tente escolher nomes coerentes para as variáveis.

        Evite se tornar um 'programador alfabeto' ou 'programador contador'(todos os nomes de variáveis são letras ou números)

    }
}

Tratamento de Dados{

    Conversão de Dados{
        STRING --> NUMBER

            Number.parseInt(n)
            Number.parseFloat(n)
            Number(n)
        
        NUMBER --> STRING

            String(n)
            n.toString()
    }

    Formatação de Strings{

        var s = "JavaScript"

        'Eu estou aprendendo s' => NÃO FAZ INTERPOLAÇÃO
        'Eu estou aprendendo' + s => USA DA CONCATENAÇÃO
        `Eu estou aprendendo ${s}` => USA TEMPLATE STRING

        ----------------------EXEMPLO--------------------------------

        VARIÁVEIS

            > nome = 'Juca'
            'Juca'
            > idade = 32
            32
            > nota = 9.4
            9.4

        CONCATENAÇÃO

            > 'O aluno ' + nome + ' de ' + idade + ' anos, tirou ' + nota + ' na prova.'
            'O aluno Juca de 32 anos, tirou 9.4 na prova.'
        
        TEMPLATE STRING  // (uso de crase pra definir um template)
        
            > `O aluno ${nome} de ${idade} anos, tirou a nota ${nota} na prova.`
            'O aluno Juca de 32 anos, tirou a nota 9.4 na prova.'
        
    }

    Formatação de Números{

        DEFININDO NÚMERO DE CASAS DECIMAIS

        --> x.toFixed(n) <--

            --------EXEMPLO---------

            > var n1 = 1547.9032
            undefined
            > n1
            1547.9032
            > n1.toFixed(2)
            > n1
            1547.9032
            > n1.toFixed(2)
            '1547.90'
            > n1.toFixed(2).replace('.' , ',')
            '1547,90'

        DEFININDO NÚMEROS COMO MOEDAS
        
        --> x.toLocaleString('pt-BR("ou outro")', {style: 'currency', currency: 'BRL("ou  outro")'}) <--

            --------EXEMPLO---------

            > var sal = 1346.98
            undefined
            > sal
            1346.98
            > sal
            1475.09348
            > sal.toFixed(2)
            '1475.09'
            > sal.toFixed(2).replace('.' , ',')
            '1475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'BRL'})
            'R$ 1.475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'USD'})
            'US$ 1.475,09'
            > sal.toLocaleString('pt-BR',{style: 'currency', currency: 'EUR'})
            '€ 1.475,09'
            
    }
}

Operadores{

    Aritméticos{
        
        5 + 2 = 7    (ADIÇÃO)
        5 - 2 = 3    (SUBTRAÇÃO)
        5 * 2 = 10   (MULTIPLICAÇÃO)
        5 / 2 = 2.5  (DIVISÃO REAL)
        5 % 2 = 1    (DIVISÃO INTEIRA / CÁLCULO DE RESTO)
        5 ** 2 = 25  (POTENCIAÇÃO / EXPONENCIAÇÃO)

        Precedências

            1º =>    ()
            2º =>    **
            3º =>    * / %
            4º =>    + -
    }
    Atribuição{
        ' = ' significa recebe

        var a = 5 + 3               == 8
        var b = a % 5               == 3
        var c = 5 * b ** 2          == 45
        var d = 10 - a / 2          == 6
        var e = 6 * 2 / d           == 2
        var f = b % e + 4 / e       == 3

        Auto-Atribuição  -  atribuir valor a uma variável baseado no valor de antes.

            --------EXEMPLO---------

            > var n = 3
            undefined
            > n=n+4
            7
            > n=n+4
            11
            > n=n+4
            15
            > n=n+4
            > var n = 3
            undefined
            > n
            3
            > n = n + 4
            7
            > n = n - 5
            2
            > n = n * 4
            8
            > n = n / 2
            4
            > n = n ** 4
            256
            > n = 4
            4
            > n = n ** 2
            16
            > n = n % 5
            1
        
        Incremento

            ( x = x + 1 )  =>  ( x += 1 )  => ( x++ )
            ( x = x - 1 )  =>  ( x -= 1 )  => ( x-- )

        Simplificando
            n = n + 4    ==>   n  += 4
            n = n - 4    ==>   n  -= 4
            n = n * 4    ==>   n  *= 4
            n = n / 4    ==>   n  /= 4
            n = n % 4    ==>   n  %= 4
            n = n ** 4   ==>   n **= 4

        
    }

    Relacionais{

        Maior Q
        5 > 2       true (VERDADEIRO)
        
        Menor Q
        7 < 4       false (FALSO)
        
        Maior ou Igual 
        8 >= 8      true (VERDADEIRO)
        
        Menor ou Igual
        9 <= 7      false (FALSO)
        
        Igual
        5 == 5      true (VERDADEIRO)
        
        Diferente
        4 != 4      false (FALSO)

        IDENTIDADE
            
            5 ==  5   ==> true (VERDADEIRO)  //mesma grandeza e mesmo tipo
            5 == '5'  ==> true (VERDADEIRO)  //mesma grandeza e tipos diferentes
            O JavaScript testa apenas a grandeza dos caracteres

            5 === '5' ==> false (FALSO)
            5 ===  5  ==> true (VERDADEIRO)

    }

    Lógicos{

        !  NEGAÇÃO
            
            !true  --->  false
            !false --->  true

        && CONJUNÇÃO

            true&&true   ---> true
            true&&false  ---> false
            false&&true  ---> false
            false&&false ---> false

        || DISJUNÇÃO

            true||true    ---> true
            true||false   ---> true
            false||true   ---> true
            false||false  ---> false

        ?: TERNÁRIO

            |teste| ? |true| : |false|
            |média >= 7| ? |"Aprovado"| : |"Reprovado"|  //similar a if(se) e 		   else(senão) 

        Precedência
		
		

    }
    Ternários{

    }
}

D.O.M{

    DOM  é a sigla utilizada para Document Object Model
    Ñ funciona com o node.js

    Árvore DOM{
        raiz.objeto.

        window {

            location  -  localização do seu site
            document {
                html {
                    head {
                        meta
                        title
                    }
                        
                    body {
                        h1
                        p
                        section {
                            p {
                                strong
                            }
                            p
                        }
                    }
                }
            }
            history   -  histórico
        }
    }

    Selecionando Objetos{
        Por Marca/Tag{
            getElementsByTagName()
        }
        Por ID{
            getElementByID()
        }
        Por Nome{
            getElementsByName()
        }
        Por Classe{
            getElementsByClassName()
        }
        Por Seletor{
            querySelector()
        }
    }
    Eventos D.O.M {
        Event Reference MDN                   // pesquisar

        Eventos de Mouse
            mouseenter
            mousemove
            mousedown
            mouseup
            click
            mouseout
    }   

    Funções{

        Conjunto de códigos/linhas que são executadas somente se um evento acontecer.
        Bloco - conjunto de linhas de código

        ---------------------SINTAXE-----------------------
            function ação(parâmetros){
                Bloco
            }
    }
}

Condições{

    Desvio condicional
        Método para acionar diferentes tipos de ação a depender da situação.
        Impõe condições para que determinado comando seja executado.
    
    Estrutura

        if(condição == true){
            ----Ação-----
        }
        else(condição == false){
            ----Outra Ação-----
        }
    
    Tipos de Condição{

        Condição Simples
            (condição == true, executa ação)    // se n tiver else, nada acontece
                          
        Condição Composta
            if(condição == true, executa ação)
            else(condição == false, executa outra ação)
                    
        Condição Aninhada
            if(condição == true){
                ----Ação-----
            }else{
                if(condição 2 == true){
                    ------Ação-2--------
                }else{
                    ------Ação-3--------
                            OU
                    if(.....){
                        ................
                    }else{
                        ................
                    }
                }
            }
        
        Condição Múltipla{
            Serve para trabalhar valores fixos

            Estrutura
                switch(expressão){
                case 1:
                    -----Código--------
                break
                case 2:
                    -----Código--------
                break
                default:
                    -----Código--------
                break
            }  //   O COMANDO => "BREAK" <= É OBRIGATÓRIO!!!!
        }
        
        'BREAK'    ----> Utilizado para parar uma intrução.
        'CONTINUE' ----> Utilizado para pular uma intrução
        
    }   
}
Repetições {
    while    --->  estrutura de repetição com teste lógico no início

        Testa a condição e executa o bloco.
        
        ----------------------------
        while(condição){
            BLOCO
        }
        ----------------------------

    do while  -->  estrutura de repetição com teste lógico no final

        Executa o bloco e testa a condição.

        -----------------------------
        do{
            BLOCO
        }while() 
        -----------------------------

    for  ----->  estrutura de repetição com variável de controle

        Inicializa, faz o teste lógico e realiza um incremento

        ----------------------------
        for(inicio;teste;incremento){
            BLOCO           
        }
}
Arrays{
    Variáveis Simples - Armazenam apenas 1 valor por vez
    Variáveis Compostas - conseguem armazenar vários valores em uma mesma estrutura

    Arrays - vetor
        Variável composta que recebe vários elementos.
            Elemento - objeto que ocupa parte do array, o valor atribuído a ele e um índice.
                Índice - marcação para organizar o elementos dentro de um array, e a destinação de seus conteúdos.
                    Conteúdo - valor de cada elemento.
    
    Array = variável composta, que agrupa vários elementos, onde cada elemento tem um valor e uma chave de identificação.

    ESTRUTURA
        --------------------------------
        let num = []
        --------------------------------

    ADICIONANDO ELEMENTOS E ATRIBUTOS
        --------------------------------
        num[3] = 6
        --------------------------------
        Define o elemento número 3 com o valor 6.

        --------------------------------
        num.push(7)
        --------------------------------
        Define o valor 7 a um elemento criado na última posição.

        --------------------------------
        num.length
        --------------------------------
        Lê o comprimento(número de elementos) do seu vetor

        --------------------------------
        num.sort()
        --------------------------------
        Organiza os elementos em ordem crescente de acordo com seus valores

        --------------------------------
        num.indexOf(7)
        --------------------------------
        Busca um valor dentro de um vetor(no caso o valor 7), retornando a posição onde o valor se encontra. 
    
}
Funções{

    Funções(tarefas ou rotinas) - são ações executadas assim que são chamadas em decorrência de um evento.

        ESTRUTURA
            Chamada
            Parâmetro(1/+)
            Ação
            Retorno    

            // obs: Nem toda função tem parâmetros e nem toda função tem retorno.
            // obs: Funções em JavaScript só podem ter 1 retorno.

            -------------------------------------
            function ação(parâmetros){
                BLOCO
                return res
            }
            ação(5)
            --------------------------------------

            //obs: Funções tem propriedade recursiva(quando uma função chama ela mesma)     
}

Objetos{
    Variável composta com possibilidade de índice literal(é possível nomear os índices, diferentemente de arrays(sempre são 0,1,2...))

    ESTRUTURA
     let variável = {índice: 'Valor'(string, number,  etc...), índice: 'valor', índice: 'valor', ...}
     
    ------------------------------------------------------------------------------------------------
        let amigo = {nome: 'José', sexo: 'M', peso: 85.4, engordar(p){}}
    ------------------------------------------------------------------------------------------------

    Objetos além de poder guardar vários valores, também podem armazenar funcionalidades(métodos).
}